(define (element-of-set? x set)
    (cond ((null? set) #f)
        ((= x (car set)) #t)
        ((< x (car set)) #f)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set) 
    (if (null? set)
        (cons x set)
        (let ((value (car set))
              (rest (cdr set)))
              (cond ((= x value) set)
                    ((< x value) (cons x set))
                    (else (adjoin-set x rest))))))