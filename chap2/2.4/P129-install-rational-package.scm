(load "./P119-tag.scm")
(load "./P123-put-get.scm")

(define (install-rational-package)
    ; internal procedures
    (define (make n d)
        (define sign
                (if (or (and (> n 0) (> d 0))
                        (and (< n 0) (< d 0)))
                    1
                    -1))
        (let ((g (gcd n d)))
            (cons (/ (* sign n) g) (/ (abs d) g))))
    (define (numer x) (car x))
    (define (denom x) (cdr x))

    (define (add x y)
        (make (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
    (define (sub x y)
        (make (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
    (define (mul x y)
        (make (* (numer x) (numer y))
              (* (denom x) (denom y))))
    (define (div x y)
        (make (* (numer x) (denom y))
              (* (numer y) (denom x))))
    ; interface to rest of system
    (define (tag x)
        (attach-tag 'rational x))
    (put 'add '(rational rational)
         (lambda (x y) (tag (add x y))))
    (put 'sub '(rational rational)
         (lambda (x y) (tag (sub x y))))
    (put 'mul '(rational rational)
         (lambda (x y) (tag (mul x y))))
    (put 'div '(rational rational)
         (lambda (x y) (tag (div x y))))
    (put 'make 'rational
         (lambda (n d) (tag (make n d))))
    (put 'equ? '(rational rational)
        (lambda (x y) (and (= (numer x) (numer y))
                           (= (denom x) (denom y)))))
    (put '=zero? '(rational)
        (lambda (x) (and (= (numer x) 0)
                           (= (denom x) 0))))
    'done)
(define (make-rational n d)
    ((get 'make 'rational) n d))