(define (fast-expt b n)
    (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))
(define (even? n)
    (= (remainder n 2) 0))

(define (fast-expt-iter a b n)
    (cond ((= n 0) a)
        ((even? n) (fast-expt-iter a (square b) (/ n 2)))
        (else (fast-expt-iter (* a b) b (- n 1)))))
; (trace fast-expt)
; (trace fast-expt-iter)
; (fast-expt 2 100)
; (fast-expt-iter 1 2 100)