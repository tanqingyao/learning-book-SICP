; (load "1-21-prime.scm")
(load "1-23-next-prime.scm")


(define (timed-prime-test n count)
    (newline)
    (display n)
    (start-prime-test n count (real-time-clock)))

(define (start-prime-test n count start-time)
    (cond ((= 0 count) (newline)
                        (display "find the numbers"))
        ((prime? n) (report-prime n (- (real-time-clock) start-time))
                    (start-prime-test (+ n 1) (- count 1) start-time))
        (else (start-prime-test (+ n 1) count start-time))))
(define (report-prime num elapsed-time)
    (display " the number is : ")
    (display num)
    (display " *** ")
    (display elapsed-time))
; (define (next-odd n)
;     (if (odd? n)
;         (+ 2 n)
;         (+ 1 n)))
; (timed-prime-test 1000 3)
; (timed-prime-test 10000 3)
; (timed-prime-test 100000 3)
; (timed-prime-test 1000000 3)
(timed-prime-test 100000000 3)
(timed-prime-test 1000000000000 3)